#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2011 OpenWrt.org
# Copyright (C) 2017 BG5HHP

# This script needs shadow-useradd and openssl-util installed currently

START=99

SERVICE_USE_PID=0

USER=mmdvm
PKG_NAME=MMDVMHost
BIN_FILE=/usr/sbin/MMDVMHost
CONF_NAME=MMDVM.ini
CONF_FILE=/etc/${CONF_NAME}
TMP_CONF_FILE=/tmp/.MMDVM.ini.upd
PID_FILE=/tmp/mmdvmhost.pid
LOG_DIR=/var/log/mmdvm
DATA_DIR=/etc/mmdvm
MD5_TOOL='/usr/bin/md5sum'
SERVER_URL='https://hamclub.net/openwrt/config'

do_update(){
  local CALL=$1
  local MAC=$2

  if [ -e /etc/openwrt_release ];then
    CALL=`uci get system.@system[0].hostname`
    MAC=`ifconfig eth0 | grep "HWaddr" | awk '{print $5}'`
  else
    CALL=`hostname -s`
    MAC=`ifconfig |grep HWaddr |awk '{print $5}' |head -n 1`
  fi
  [ -z $CALL ] && echo "Error: Need CALLSIGN" && exit
  [ -z $MAC ] && echo "Warn: missing MAC!"

  echo CALL: ${CALL}, MAC: ${MAC}

  local REMOTE=${SERVER_URL}/${CALL}.${CONF_NAME}?mac=${MAC//:/}

  echo "GET ${REMOTE}..."
  rm -f ${TMP_CONF_FILE}
  wget -q  ${REMOTE} -O ${TMP_CONF_FILE}
  if [ $? -ne 0 ];then
    echo "Get remote config FAILED!"
    return 1
  fi

  local MD5_REMOTE=`${MD5_TOOL} ${TMP_CONF_FILE} |awk '{print $1}'`
  local MD5_LOCAL=empty
  [ -f $CONF_FILE ] && MD5_LOCAL=`${MD5_TOOL} ${CONF_FILE} |awk '{print $1}'`
  echo "L: ${MD5_LOCAL}"
  echo "R: ${MD5_REMOTE}"
  if [ "${MD5_LOCAL}" = "${MD5_REMOTE}" ];then
    echo "Config is not changed"
    return 0
  fi

  # finally overwrite the local configuration file
  echo "Updating ${CONF_FILE}..."
  cp -f ${TMP_CONF_FILE} ${CONF_FILE}
  [ $? -eq 0 ] || echo "Update failed!"
}

check_update() {
  echo "Updating config from network..."
  if [ $1 -eq 0 ];then
    $1=3
  fi

  local i=1
  # while [ $i -le $1 ];do
  #   i=$(($i+1))
  #   echo "Trying $(($i-1))...";
  #   do_update
  #   [ $? -ne 0 ] || return 0
  #   sleep 5
  # done
  while true; do
    echo "Trying $(($i))...";
    i=$(($i+1))
    do_update
    [ $? -ne 0 ] || return 0
    [ $i -le $1 ] || return 1
    sleep 5
  done
  return 1
}

check_user(){
  id "${USER}" >/dev/null 2>&1
  if [ ! $? -eq 0 ]; then
    echo "Creating user ${USER}"
    if [ -f /usr/sbin/useradd ]; then
      /usr/sbin/useradd -N -M -s /bin/false ${USER}
    else
      echo "create user ${USER} failed, ${PKG_NAME} will not start."
      exit 1;
    fi
  fi
  echo "Check user OK"
}

check_permission(){
  echo "Check permission"
  local __devs="ttyACM0 ttyACM1 ttyUSB0 ttyUSB1 ttyS1 ttyS2"
  for __dev in $(echo $__devs); do
    [ -f /dev/$__dev ] && chown ${USER} /dev/$__dev && echo " $__dev found and fixed"
  done

  [ -d $DATA_DIR ] || mkdir -m 755 -p $DATA_DIR
  [ -d $DATA_DIR ] && chown -R ${USER} $DATA_DIR && echo " $DATA_DIR found and fixed"

  [ -d $LOG_DIR ] || mkdir -m 755 -p ${LOG_DIR}
  [ -d $LOG_DIR ] && chown -R ${USER} ${LOG_DIR} && echo " $LOG_DIR found and fixed"
  echo "Check permission OK"
}

check_running(){
  # check if service is running
  if [ -e ${PID_FILE} ]; then
    local PID=`pidof ${PKG_NAME}`
    if [ $? -eq 0 ]; then
            echo "${PKG_NAME} is running"
            return 0
    fi
  fi
  return 1
}

# returns 1 if enabled or 0 disabled
check_enabled(){
  local __en=$(uci -q get mmdvm.@mmdvmhost[0].enabled)
  [ -z $__en ] || [ $__en -eq 0 ] || return 1
  return 0
}

do_start() {
  if [ -e ${CONF_FILE} ]; then
    ${BIN_FILE} ${CONF_FILE}
    echo "Starting..."
    sleep 3
    local PID=`pidof ${PKG_NAME}`
    if [ $? -eq 1 ]; then
        echo "Process does not exist, ${PKG_NAME} will not start."
        #rm ${CONF_FILE}
        return 1
    fi
    echo ${PID} >${PID_FILE}
    >&2 echo "${PKG_NAME} started"
  else
    >&2 echo "configuration file missing, ${PKG_NAME} will not start."
  fi
}

start() {
	check_running
  if [ $? -eq 0 ]; then
    return 0
  fi
  check_user && check_permission  
  check_update 1
  check_enabled
  if [ $? -eq 0 ]; then
    >&2 echo "${PKG_NAME} will not start because it's disabled"
    return 1
  fi
  do_start
}

stop() {
        if [ -e ${PID_FILE} ]; then
                local PID=`cat ${PID_FILE}`
                kill $PID > /dev/null 2>&1
                rm -f ${PID_FILE}
                echo "${PKG_NAME} stopped"
        else
                echo "${PKG_NAME} is not running"
        fi
        return 0
}

restart() {
        stop
        start
}

EXTRA_COMMANDS="update"
EXTRA_HELP="        update  Update the configurations from cloud"
update(){
  check_update 3
}
